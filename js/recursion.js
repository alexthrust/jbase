/*
Максимальная глубина рекурсии ограничена и составляет около 10000, 
но это число зависит от браузера и может быть в 10 раз меньше.

У каждого вызова функции есть свой «контекст выполнения» (execution context).

Контекст выполнения включает в себя локальные переменные функции и 
другую служебную информацию, необходимую для её текущего выполнения.

При любом вызове функции интерпретатор переключает контекст на новый. Этот 
процесс состоит из нескольких шагов:

	1. Текущая функция приостанавливается.
	2. Информация о её выполнении, то есть текущий контекст заносится в 
	   специальную внутреннюю структуру данных: «стек контекстов».
	3. Запускается новая функция, для нее создаётся свой контекст.
	4. По завершении подвызова предыдущий контекст достаётся из стека, 
	   выполнение в нём возобновляется.

*/

//Recursion
function powerOfNumber(x, n) {
	var result = x;
	for (var i = 1; i < n; i++) {
		result *= x;
	}
	return result;
}
var twoPowerOfFive = powerOfNumber(2, 5);
console.log(twoPowerOfFive);


//xn = x * xn-1
function powerOfNumber(x, n) {
	console.log("x = " + x + "; n = " + n);
	return (n != 1) ? x * powerOfNumber(x, n - 1) : x;
}
var twoPowerOfFive = powerOfNumber(2, 5);
console.log(twoPowerOfFive);